{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","errors","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","intialStateSearch","initialStateRequestRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+QAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCeGK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OADAC,QAAQC,IAAI,aAEV,6BAEIF,EAAOG,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIK,EAAOK,GAAGV,GACdF,KAAMO,EAAOK,GAAGZ,KAChBC,MAAOM,EAAOK,GAAGX,aCEhBa,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAEhC,OADAR,QAAQC,IAAI,aAEV,yBAAKN,UAAU,OACb,2BACEA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCqBEC,E,YAvBb,WAAYN,GAAO,IAAD,8BAChB,4CAAMA,KAYRO,YAAc,WACZ,EAAKC,UAAU,SAAAC,GAAK,MAAK,CAAEC,MAAOD,EAAMC,MAAQ,OAZhD,EAAKD,MAAQ,CACXC,MAAO,GAHO,E,mFAMGC,EAAWC,GAC9B,OAAIC,KAAKJ,MAAMC,QAAUE,EAAUF,Q,+BAYrC,OADAvB,QAAQC,IAAI,iBACJ,4BAAQ0B,MAAOD,KAAKb,MAAMc,MAAOC,QAASF,KAAKN,aAA/C,UAAoEM,KAAKJ,MAAMC,W,GApB7DM,aCgBbC,E,8LAdQN,EAAWC,GAChC,OAAO,I,+BAIP,OADAzB,QAAQC,IAAI,UAEX,6BACC,wBAAIN,UAAU,MAAd,eACA,kBAAC,EAAD,CAAegC,MAAO,a,GATLE,a,QCwBfE,G,kMAGFL,KAAKb,MAAMmB,oB,+BAIH,IAAD,EACoDN,KAAKb,MAAxDN,EADD,EACCA,YAAa0B,EADd,EACcA,eAAgBlC,EAD9B,EAC8BA,OAAQmC,EADtC,EACsCA,UACvCC,EAAiBpC,EAAOqC,QAAO,SAAAC,GACnC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAShC,EAAY+B,kBAEvD,OAAOJ,EACL,uCAEE,yBAAKvC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWa,aAAcyB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlC,OAAQoC,U,GAnBZN,cA0BHW,eA1CS,SAAAlB,GACtB,MAAO,CACLf,YAAae,EAAMmB,aAAalC,YAChCR,OAAQuB,EAAMoB,cAAc3C,OAC5BmC,UAAWZ,EAAMoB,cAAcR,UAC/BS,MAAOrB,EAAMoB,cAAcE,WAIJ,SAACC,GAC1B,MAAO,CACLZ,eAAgB,SAACa,GAAD,OAAWD,ECfU,CACxCpC,KCRkC,sBDSlCsC,QDasDD,EAAME,OAAOC,SAChEjB,gBAAiB,kBAAMa,GCXQ,SAACA,GACnCA,EAAS,CAAEpC,KCZ0B,2BDarCyC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAEpC,KCdW,yBDcmBsC,QAASO,OAC/DC,OAAM,SAAAZ,GAAK,OAAIE,EAAS,CAAEpC,KCdQ,wBDcqBsC,QAASJ,cDoCpDH,CAA6CT,GG3CtDyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTZ,MAAK,SAAAgB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/C,QACf0C,UAAUC,cAAcO,WAK1BxE,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBsD,OAAM,SAAAZ,GACL3C,QAAQ2C,MAAM,4CAA6CA,M,UC/D3D8B,EAAoB,CACtBlE,YAAa,IAYXmE,EAA4B,CAC9B3E,OAAQ,GACRmC,WAAW,EACXS,MAAO,I,eCVLgC,EAAcC,YAAgB,CAAEnC,aDFV,WAA6C,IAA5CnB,EAA2C,uDAAnCmD,EAAmBI,EAAgB,uDAAP,GAC7D,OAAQA,EAAOpE,MACX,IFb2B,sBEcvB,OAAOqE,OAAOC,OAAO,GAAIzD,EAAO,CAAEf,YAAasE,EAAO9B,UAC1D,QACI,OAAOzB,ICHiCoB,cDavB,WAAqD,IAApDpB,EAAmD,uDAA3CoD,EAA2BG,EAAgB,uDAAP,GACtE,OAAQA,EAAOpE,MACX,IF3B8B,yBE4B1B,OAAOqE,OAAOC,OAAO,GAAIzD,EAAO,CAAEY,WAAW,IACjD,IF5B8B,yBE6B1B,OAAO4C,OAAOC,OAAO,GAAIzD,EAAO,CAAEvB,OAAQ8E,EAAO9B,QAASb,WAAW,IACzE,IF7B6B,wBE8BzB,OAAO4C,OAAOC,OAAO,GAAIzD,EAAO,CAAEqB,MAAOkC,EAAO9B,QAASb,WAAW,IACxE,QACI,OAAOZ,MCrBb0D,EAAQC,YAAYN,EAAaO,YAAgBC,MAEvDC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEJM,SAASC,eAAe,SFAb,WACb,GAA6C,kBAAmBvB,UAAW,CAGzE,GADkB,IAAIwB,IAAIC,eAAwB/B,OAAOC,UAC3C+B,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAM0B,eAAN,sBAEPjC,EAwCV,SAAiCO,GAE/Bb,MAAMa,GACHZ,MAAK,SAAAC,GAGkB,MAApBA,EAASwC,SACuD,IAAhExC,EAASyC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAM7C,MAAK,SAAAgB,GACjCA,EAAa8B,aAAa9C,MAAK,WAC7BO,OAAOC,SAASuC,eAKpBpC,EAAgBC,MAGnBR,OAAM,WACLvD,QAAQC,IACN,oEA5DAkG,CAAwBpC,GAGxBD,EAAgBC,OEjBxBqC,K","file":"static/js/main.e666891a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('Card List');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox')\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      count: 0\n    }\n  }\n\tshouldComponentUpdate(nextProps, nextState){\n    if (this.state.count !== nextState.count) {\n      return true\n    }\n\t\treturn false;\n  }\n  \n  updateCount = () =>{\n    this.setState( state => ({ count: state.count + 1}));\n  }\n\n\trender() {\n\t\tconsole.log('CounterButton');\n  return (<button color={this.props.color} onClick={this.updateCount}>count: {this.state.count}</button>);\n\t}\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\tshouldComponentUpdate(nextProps, nextState){\n\t\treturn false;\n\t}\n\trender() {\n\t\tconsole.log('Header');\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<CounterButton color={'red'}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchfield: state.searchRobots.searchfield,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.errors\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n\n  render() {\n    const { searchfield, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n\tCHANGE_SEARCH_FILED,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FILED,\n\tpayload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","export const CHANGE_SEARCH_FILED = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst intialStateSearch = {\n    searchfield: ''\n}\n\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FILED:\n            return Object.assign({}, state, { searchfield: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRequestRobots = {\n    robots: [],\n    isPending: false,\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRequestRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}